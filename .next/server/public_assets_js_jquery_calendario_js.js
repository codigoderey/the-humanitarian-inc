/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "public_assets_js_jquery_calendario_js";
exports.ids = ["public_assets_js_jquery_calendario_js"];
exports.modules = {

/***/ "./public/assets/js/jquery.calendario.js":
/*!***********************************************!*\
  !*** ./public/assets/js/jquery.calendario.js ***!
  \***********************************************/
/***/ (() => {

eval(";\n(function($, window, undefined) {\n    \"use strict\";\n    $.Calendario = function(options, element) {\n        this.$el = $(element);\n        this._init(options);\n    };\n    // the options\n    $.Calendario.defaults = {\n        /*\n\t  you can also pass:\n\t  month : initialize calendar with this month (1-12). Default is today.\n\t  year : initialize calendar with this year. Default is today.\n\t  caldata : initial data/content for the calendar.\n\t  caldata format:\n\t  {\n\t\t'MM-DD-YYYY' : 'HTML Content',\n\t\t'MM-DD-YYYY' : 'HTML Content',\n\t\t  ...\n\t  }\n\t*/ weeks: [\n            \"Sunday\",\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\"\n        ],\n        weekabbrs: [\n            \"Sun\",\n            \"Mon\",\n            \"Tue\",\n            \"Wed\",\n            \"Thu\",\n            \"Fri\",\n            \"Sat\"\n        ],\n        months: [\n            \"January\",\n            \"February\",\n            \"March\",\n            \"April\",\n            \"May\",\n            \"June\",\n            \"July\",\n            \"August\",\n            \"September\",\n            \"October\",\n            \"November\",\n            \"December\"\n        ],\n        monthabbrs: [\n            \"Jan\",\n            \"Feb\",\n            \"Mar\",\n            \"Apr\",\n            \"May\",\n            \"Jun\",\n            \"Jul\",\n            \"Aug\",\n            \"Sep\",\n            \"Oct\",\n            \"Nov\",\n            \"Dec\"\n        ],\n        displayWeekAbbr: false,\n        displayMonthAbbr: false,\n        startIn: 1,\n        events: \"click\",\n        fillEmpty: true,\n        feedParser: \"./feed/\",\n        zone: \"00:00\",\n        format: \"MM-DD-YYYY\",\n        checkUpdate: false //Check if any new version of Calendario is released (Details will be in the browser console)\n    };\n    $.Calendario.prototype = {\n        _init: function(options) {\n            // options\n            this.VERSION = \"3.2.0\";\n            this.UNIQUE = \"%{unique}%\"; //UNIQUE helps us differentiate your js from others and help us keep a track of run time.\n            this.options = $.extend(true, {}, $.Calendario.defaults, options);\n            this.today = new Date();\n            this.month = isNaN(this.options.month) || this.options.month === null ? this.today.getMonth() : this.options.month - 1;\n            this.year = isNaN(this.options.year) || this.options.year === null ? this.today.getFullYear() : this.options.year;\n            this.caldata = this._processCaldata(this.options.caldata);\n            // if hover is passed as an event then throw error if jQuery is 1.9 or above 1.9, because, hover psuedo name isn't supported\n            if (parseFloat($().jquery) >= 1.9 && this.options.events.indexOf(\"hover\") != -1) this.logError(\"'hover' psuedo-name is not supported\" + \" in jQuery 1.9+. Use 'mouseenter' 'mouseleave' events instead.\");\n            this.options.events = this.options.events.split(\",\");\n            this.options.zone = this.options.zone.charAt(0) != \"+\" && this.options.zone.charAt(0) != \"-\" ? \"+\" + this.options.zone : this.options.zone;\n            this._generateTemplate(true);\n            this._initEvents();\n        },\n        _processCaldataObj: function(val, key) {\n            if (typeof val !== \"object\") val = {\n                content: val,\n                startTime: \"00:00\",\n                endTime: \"23:59\",\n                allDay: true\n            };\n            if (!val.content) this.logError(\"Content is missing in date \" + key);\n            if (val.startTime && !val.endTime) val.endTime = parseInt(val.startTime.split(\":\")[0]) + 1 + \":\" + val.startTime.split(\":\")[1];\n            if (!val.startTime && !val.endTime) val = $.extend({}, val, {\n                startTime: \"00:00\",\n                endTime: \"23:59\",\n                allDay: true\n            });\n            if (val.startTime && val.endTime && val.allDay === undefined) val.allDay = false;\n            if (/^\\d{2}-DD-\\d{4}/.test(key) || /^\\d{2}-DD-YYYY/.test(key)) {\n                var det = /^(\\d{2})-DD-(\\d{4})/.exec(key) || /^(\\d{2})-DD-YYYY/.exec(key), chkDate;\n                if (det.length == 3) chkDate = new Date(det[2], det[1], 0);\n                else if (det.length == 2) chkDate = new Date(this.year, det[1], 0);\n                if (!val.startDate) val.startDate = 1;\n                if (!val.endDate && chkDate.getDate() != 1) val.endDate = chkDate.getDate();\n                if (!val.endDate && chkDate.getDate() == 1 && det.length == 3) val.endDate = chkDate.getDate();\n            }\n            return val;\n        },\n        _processCaldata: function(caldata) {\n            var self = this;\n            caldata = caldata || {};\n            $.each(caldata, function(key, val) {\n                if (/^\\d{2}-\\d{2}-\\d{4}/.test(key) || /^\\d{2}-\\d{2}-YYYY/.test(key) || /^\\d{2}-DD-YYYY/.test(key) || /^MM-\\d{2}-YYYY/.test(key) || /^\\d{2}-DD-YYYY/.test(key) || /^MM-\\d{2}-\\d{4}/.test(key) || /^\\d{2}-DD-\\d{4}/.test(key) || key == \"TODAY\") {} else self.logError(key + \" is an Invalid Date. Date should not contain spaces, should be separated by '-' and should be in the \" + \"format 'MM-DD-YYYY'. That ain't that difficult!\");\n                if (Array.isArray(val)) {\n                    $.each(val, function(i, c) {\n                        val[i] = self._processCaldataObj(c, key);\n                    });\n                    caldata[key] = val;\n                } else {\n                    caldata[key] = self._processCaldataObj(val, key);\n                }\n            });\n            return caldata;\n        },\n        _propDate: function($cell, event) {\n            var idx = $cell.index(), data = {\n                allDay: [],\n                content: [],\n                endTime: [],\n                startTime: []\n            }, dateProp = {\n                day: $cell.children(\"span.fc-date\").text(),\n                month: this.month + 1,\n                monthname: this.options.displayMonthAbbr ? this.options.monthabbrs[this.month] : this.options.months[this.month],\n                year: this.year,\n                weekday: idx + this.options.startIn,\n                weekdayname: this.options.weeks[idx == 6 ? 0 : idx + this.options.startIn]\n            };\n            $cell.children(\"div.fc-calendar-events\").children(\"div.fc-calendar-event\").each(function(i, e) {\n                var $html = $(\"<div>\" + $(e).html() + \"</div>\");\n                data.startTime[i] = new Date($html.find(\"time.fc-starttime\").attr(\"datetime\"));\n                data.endTime[i] = new Date($html.find(\"time.fc-endtime\").attr(\"datetime\"));\n                data.allDay[i] = $html.find(\"time.fc-allday\").attr(\"datetime\") === \"true\" ? true : false;\n                $html.find(\"time\").remove();\n                data.content[i] = $html.html();\n            });\n            if (dateProp.day) this.options[event]($cell, data, dateProp);\n        },\n        _initEvents: function() {\n            var self = this, event = [], calendarioEventNameFormat = [];\n            for(var i = 0; i < self.options.events.length; i++){\n                event[i] = self.options.events[i].toLowerCase().trim();\n                calendarioEventNameFormat[i] = \"onDay\" + event[i].charAt(0).toUpperCase() + event[i].slice(1);\n                if (this.options[calendarioEventNameFormat[i]] === undefined) this.options[calendarioEventNameFormat[i]] = function($el, $content, dateProperties) {\n                    return false;\n                };\n                this.$el.on(event[i] + \".calendario\", \"div.fc-row > div\", function(e) {\n                    if (e.type == \"mouseenter\" || e.type == \"mouseleave\") e.type = $.inArray(e.type, event) == -1 ? \"hover\" : e.type;\n                    self._propDate($(this), calendarioEventNameFormat[$.inArray(e.type, event)]);\n                });\n            }\n            this.$el.on(\"shown.calendar.calendario\", function(e, instance) {\n                // If check update set to true, then contact calendario's update servers for details. We didn't want to slow down your code. So we\n                // check after the calendar is rendered.\n                if (instance && instance.options.checkUpdate) self._checkUpdate();\n            });\n            // newday trigger. This trigger is exactly triggered at 00:00 hours the next day with an uncertainty of 6ms.\n            this.$el.delay(new Date(this.today.getFullYear(), this.today.getMonth(), this.today.getDate() + 1, 0, 0, 0) - new Date().getTime()).queue(function() {\n                self.today = new Date();\n                if (self.today.getMonth() == self.month || self.today.getMonth() + 1 == self.month) self._generateTemplate(true);\n                self.$el.trigger($.Event(\"newday.calendar.calendario\"));\n            });\n        },\n        _checkUpdate: function() {\n            var self = this;\n            $.getScript(\"js/cal-update.js\").done(function(script, textStatus) {\n                if (calendario.current != self.version() && parseFloat(calendario.current) >= parseFloat(self.version())) console.info(calendario.msg);\n            }).fail(function(jqxhr, settings, exception) {\n                console.error(exception);\n            });\n        },\n        // Calendar logic based on http://jszen.blogspot.pt/2007/03/how-to-build-simple-calendar-with.html\n        _generateTemplate: function(firstRun, callback) {\n            var head = this._getHead(), body = this._getBody(), rowClass;\n            switch(this.rowTotal){\n                case 4:\n                    rowClass = \"fc-four-rows\";\n                    break;\n                case 5:\n                    rowClass = \"fc-five-rows\";\n                    break;\n                case 6:\n                    rowClass = \"fc-six-rows\";\n                    break;\n            }\n            this.$cal = $('<div class=\"fc-calendar ' + rowClass + '\">').append(head, body);\n            this.$el.find(\"div.fc-calendar\").remove().end().append(this.$cal);\n            this.$el.find(\".fc-emptydate\").parent().css({\n                \"background\": \"transparent\",\n                \"cursor\": \"default\"\n            });\n            if (!firstRun) this.$el.trigger($.Event(\"shown.calendario\"));\n            if (callback) callback.call();\n        },\n        _getHead: function() {\n            var html = '<div class=\"fc-head\">';\n            for(var i = 0; i <= 6; i++){\n                var pos = i + this.options.startIn, j = pos > 6 ? pos - 6 - 1 : pos;\n                html += \"<div>\" + (this.options.displayWeekAbbr ? this.options.weekabbrs[j] : this.options.weeks[j]) + \"</div>\";\n            }\n            return html + \"</div>\";\n        },\n        _parseDataToDay: function(data, day, other) {\n            var content = \"\";\n            if (!other) {\n                if (Array.isArray(data)) content = this._convertDayArray(data, day);\n                else content = this._wrapDay(data, day, true);\n            } else {\n                if (!Array.isArray(data)) data = [\n                    data\n                ];\n                for(var i = 0; i < data.length; i++){\n                    if (this.month != 1 && day >= data[i].startDate && day <= data[i].endDate) content += this._wrapDay(data[i], day, true);\n                    else if (this.month == 1 && day >= data[i].startDate) {\n                        if (data[i].endDate && day <= data[i].endDate) content += this._wrapDay(data[i], day, true);\n                        else if (!data[i].endDate) content += this._wrapDay(data[i], day, true);\n                    }\n                }\n            }\n            return content;\n        },\n        _toDateTime: function(time, day, start) {\n            var zoneH = parseInt(this.options.zone.split(\":\")[0]), zoneM = parseInt(this.options.zone.charAt(0) + this.options.zone.split(\":\")[1]), hour = parseInt(time.split(\":\")[0]) - zoneH, minutes = parseInt(time.split(\":\")[1]) - zoneM, d = new Date(Date.UTC(this.year, this.month, day, hour, minutes, 0, 0));\n            if (start) {\n                var hStart = parseInt(start.split(\":\")[0]) - zoneH, mStart = parseInt(start.split(\":\")[1]) - zoneM;\n                if (d.getTime() - new Date(Date.UTC(this.year, this.month, day, hStart, mStart, 0, 0)).getTime() < 0) d = new Date(Date.UTC(this.year, this.month, day + 1, hour, minutes, 0, 0));\n            }\n            return d.toISOString();\n        },\n        _timeHtml: function(day, date) {\n            var content = day.content;\n            content += '<time class=\"fc-allday\" datetime=\"' + day.allDay + '\"></time>';\n            content += '<time class=\"fc-starttime\" datetime=\"' + this._toDateTime(day.startTime, date) + '\">' + day.startTime + \"</time>\";\n            content += '<time class=\"fc-endtime\" datetime=\"' + this._toDateTime(day.endTime, date, day.startTime) + '\">' + day.endTime + \"</time>\";\n            return content;\n        },\n        _wrapDay: function(day, date, wrap) {\n            if (date) {\n                if (wrap) return '<div class=\"fc-calendar-event\">' + this._timeHtml(day, date) + \"</div>\";\n                else return this._timeHtml(day, date);\n            } else return '<div class=\"fc-calendar-event\">' + day + \"</div>\";\n        },\n        _convertDayArray: function(day, date) {\n            var wrap_days = [];\n            for(var i = 0; i < day.length; i++){\n                wrap_days[i] = this._wrapDay(day[i], date, false);\n            }\n            return this._wrapDay(wrap_days.join('</div><div class=\"fc-calendar-event\">'));\n        },\n        _getBody: function() {\n            var d = new Date(this.year, this.month + 1, 0), monthLength = d.getDate(), firstDay = new Date(this.year, d.getMonth(), 1), pMonthLength = new Date(this.year, this.month, 0).getDate();\n            // day of the week\n            this.startingDay = firstDay.getDay();\n            var html = '<div class=\"fc-body\"><div class=\"fc-row\">', day = 1; // fill in the days\n            for(var i = 0; i < 7; i++){\n                for(var j = 0; j <= 6; j++){\n                    var pos = this.startingDay - this.options.startIn, p = pos < 0 ? 6 + pos + 1 : pos, inner = \"\", today = this.month === this.today.getMonth() && this.year === this.today.getFullYear() && day === this.today.getDate(), past = this.year < this.today.getFullYear() || this.month < this.today.getMonth() && this.year === this.today.getFullYear() || this.month === this.today.getMonth() && this.year === this.today.getFullYear() && day < this.today.getDate(), content = \"\";\n                    if (this.options.fillEmpty && (j < p || i > 0)) {\n                        if (day > monthLength) {\n                            inner = '<span class=\"fc-date fc-emptydate\">' + (day - monthLength) + '</span><span class=\"fc-weekday\">';\n                            ++day;\n                        } else if (day == 1) {\n                            inner = '<span class=\"fc-date fc-emptydate\">' + (pMonthLength - p + 1) + '</span><span class=\"fc-weekday\">';\n                            ++pMonthLength;\n                        }\n                        inner += this.options.weekabbrs[j + this.options.startIn > 6 ? j + this.options.startIn - 6 - 1 : j + this.options.startIn] + \"</span>\";\n                    }\n                    if (day <= monthLength && (i > 0 || j >= p)) {\n                        inner = '<span class=\"fc-date\">' + day + '</span><span class=\"fc-weekday\">' + this.options.weekabbrs[j + this.options.startIn > 6 ? j + this.options.startIn - 6 - 1 : j + this.options.startIn] + \"</span>\";\n                        var strdate = (this.month + 1 < 10 ? \"0\" + (this.month + 1) : this.month + 1) + \"-\" + (day < 10 ? \"0\" + day : day) + \"-\" + this.year, dayData = this.caldata[strdate], strdateyear = (this.month + 1 < 10 ? \"0\" + (this.month + 1) : this.month + 1) + \"-\" + (day < 10 ? \"0\" + day : day) + \"-YYYY\", dayDataYear = this.caldata[strdateyear], strdatemonth = \"MM-\" + (day < 10 ? \"0\" + day : day) + \"-\" + this.year, dayDataMonth = this.caldata[strdatemonth], strdatemonthyear = \"MM\" + \"-\" + (day < 10 ? \"0\" + day : day) + \"-YYYY\", dayDataMonthYear = this.caldata[strdatemonthyear], strdatemonthlyyear = (this.month + 1 < 10 ? \"0\" + (this.month + 1) : this.month + 1) + \"-DD-\" + this.year, dayDataMonthlyYear = this.caldata[strdatemonthlyyear], strdatemonthly = (this.month + 1 < 10 ? \"0\" + (this.month + 1) : this.month + 1) + \"-DD-YYYY\", dayDataMonthly = this.caldata[strdatemonthly];\n                        if (today && this.caldata.TODAY) content += this._parseDataToDay(this.caldata.TODAY, day);\n                        if (dayData) content += this._parseDataToDay(dayData, day);\n                        if (dayDataMonth) content += this._parseDataToDay(dayDataMonth, day);\n                        if (dayDataMonthlyYear) content += this._parseDataToDay(dayDataMonthlyYear, day, true);\n                        if (dayDataMonthly) content += this._parseDataToDay(dayDataMonthly, day, true);\n                        if (dayDataMonthYear) content += this._parseDataToDay(dayDataMonthYear, day);\n                        if (dayDataYear) content += this._parseDataToDay(dayDataYear, day);\n                        if (content !== \"\") inner += '<div class=\"fc-calendar-events\">' + content + \"</div>\";\n                        ++day;\n                    } else {\n                        today = false;\n                    }\n                    var cellClasses = today ? \"fc-today \" : \"\";\n                    if (past) cellClasses += \"fc-past \";\n                    else cellClasses += \"fc-future \";\n                    if (content !== \"\") cellClasses += \"fc-content\";\n                    html += (cellClasses !== \"\" ? '<div class=\"' + cellClasses.trim() + '\">' : \"<div>\") + inner + \"</div>\";\n                }\n                if (day > monthLength) {\n                    this.rowTotal = i + 1;\n                    break;\n                } else {\n                    html += '</div><div class=\"fc-row\">';\n                }\n            }\n            return html + \"</div></div>\";\n        },\n        _move: function(period, dir, callback) {\n            if (dir === \"previous\") {\n                if (period === \"month\") {\n                    this.year = this.month > 0 ? this.year : --this.year;\n                    this.month = this.month > 0 ? --this.month : 11;\n                } else if (period === \"year\") this.year = --this.year;\n            } else if (dir === \"next\") {\n                if (period === \"month\") {\n                    this.year = this.month < 11 ? this.year : ++this.year;\n                    this.month = this.month < 11 ? ++this.month : 0;\n                } else if (period === \"year\") this.year = ++this.year;\n            }\n            this._generateTemplate(false, callback);\n        },\n        /*************************\n\t***** PUBLIC METHODS *****\n\t**************************/ option: function(option, value) {\n            if (value) this.options[option] = value;\n            else return this.options[option];\n        },\n        getYear: function() {\n            return this.year;\n        },\n        getMonth: function() {\n            return this.month + 1;\n        },\n        getMonthName: function() {\n            return this.options.displayMonthAbbr ? this.options.monthabbrs[this.month] : this.options.months[this.month];\n        },\n        // gets the cell's content div associated to a day of the current displayed month\n        // day : 1 - [28||29||30||31]\n        getCell: function(day) {\n            var row = Math.floor((day + this.startingDay - this.options.startIn - 1) / 7), pos = day + this.startingDay - this.options.startIn - row * 7 - 1;\n            return this.$cal.find(\"div.fc-body\").children(\"div.fc-row\").eq(row).children(\"div\").eq(pos);\n        },\n        setData: function(caldata, clear) {\n            caldata = this._processCaldata(caldata);\n            if (clear) this.caldata = caldata;\n            else $.extend(this.caldata, caldata);\n            this._generateTemplate(false);\n        },\n        // goes to today's month/year\n        gotoNow: function(callback) {\n            this.month = this.today.getMonth();\n            this.year = this.today.getFullYear();\n            this._generateTemplate(false, callback);\n        },\n        // goes to month/year\n        gotoMonth: function(month, year, callback) {\n            this.month = month - 1;\n            this.year = year;\n            this._generateTemplate(false, callback);\n        },\n        gotoPreviousMonth: function(callback) {\n            this._move(\"month\", \"previous\", callback);\n        },\n        gotoPreviousYear: function(callback) {\n            this._move(\"year\", \"previous\", callback);\n        },\n        gotoNextMonth: function(callback) {\n            this._move(\"month\", \"next\", callback);\n        },\n        gotoNextYear: function(callback) {\n            this._move(\"year\", \"next\", callback);\n        },\n        feed: function(callback) {\n            var self = this;\n            $.post(self.options.feedParser, {\n                dates: this.caldata\n            }).always(function(data) {\n                if (callback) callback.call(this, JSON.parse(data).hevent);\n            });\n        },\n        version: function() {\n            return this.VERSION;\n        }\n    };\n    var logError = function(message) {\n        throw new Error(message);\n    };\n    $.fn.calendario = function(options) {\n        var instance = $.data(this, \"calendario\");\n        if (typeof options === \"string\") {\n            var args = Array.prototype.slice.call(arguments, 1);\n            this.each(function() {\n                if (!instance) {\n                    logError(\"Cannot call methods on calendario prior to initialization; Attempted to call method '\" + options + \"'\");\n                    return;\n                }\n                if (!$.isFunction(instance[options]) || options.charAt(0) === \"_\") {\n                    logError(\"No such method '\" + options + \"' for calendario instance.\");\n                }\n                instance[options].apply(instance, args);\n            });\n        } else {\n            this.each(function() {\n                if (instance) instance._init();\n                else instance = $.data(this, \"calendario\", new $.Calendario(options, this));\n            });\n        }\n        instance.$el.trigger($.Event(\"shown.calendar.calendario\"), [\n            instance\n        ]);\n        return instance;\n    };\n})(jQuery, window);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./public/assets/js/jquery.calendario.js\n");

/***/ })

};
;